rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Submissions folder - authenticated users can upload files
    match /submissions/{submissionId}/{fileType}/{fileName} {
      allow read, write: if request.auth != null;
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.metadata.uploadedBy ||
         get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User profile images (alternative path)
    match /profiles/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public assets (read-only)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if false;
    }
    
    // Site files (read-only for all, write for admin)
    match /site_files/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Partner logos - public read, admin write
    match /partners/{allPaths=**} {
      allow read: if true; // Public read for partner logos
      allow write: if request.auth != null &&
        (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
         get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin', 'editor']);
    }
    
    // Activities images - public read, authenticated users can write (for testing)
    match /activities/images/{fileName} {
      allow read: if true; // Public read for activity images
      allow write: if request.auth != null; // Allow any authenticated user to upload for testing
      allow delete: if request.auth != null &&
        (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
         get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin']);
    }
    
    // Speaker images - public read, admin write/delete
    match /activities/speakers/images/{activityId}/{speakerId}/{fileName} {
      allow read: if true; // Public read for speaker images
      allow write: if request.auth != null &&
        (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
         get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin']);
      allow delete: if request.auth != null &&
        (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
         get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin']);
    }
    
    // Feature films storage - for posters, trailers, gallery images, etc.
    match /films/{filmId}/{fileType}/{fileName} {
      allow read: if true; // Public read for film assets (posters, trailers, etc.)
      allow write: if request.auth != null && 
        (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
         get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin']);
      allow delete: if request.auth != null &&
        (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
         get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin']);
    }
    
    // Feature films user uploads - for when users upload their own films
    match /films/{filmId}/user_uploads/{userId}/{fileType}/{fileName} {
      allow read: if request.auth != null &&
        (request.auth.uid == userId ||
         (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
          get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin']));
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && 
        (request.auth.uid == userId ||
         (exists(/databases/(default)/documents/profiles/$(request.auth.uid)) &&
          get(/databases/(default)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin']));
    }
  }
}
