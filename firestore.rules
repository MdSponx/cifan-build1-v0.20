rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        request.auth.uid != null &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'super-admin');
    }
    
    // Helper function to check if user has admin-level access (admin, super-admin, editor, jury)
    function hasAdminLevelAccess() {
      return request.auth != null && 
        request.auth.uid != null &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'super-admin' ||
         get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'editor' ||
         get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'jury');
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return request.auth != null && 
        request.auth.uid != null &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'super-admin';
    }
    
    // Helper function to check if user is editor
    function isEditor() {
      return request.auth != null && 
        request.auth.uid != null &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'editor';
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Profiles collection - users can read/write their own profile, admin-level users can read all, super-admins can update roles
    match /profiles/{userId} {
      allow read: if isOwner(userId) || hasAdminLevelAccess();
      allow write: if isOwner(userId) || isSuperAdmin();
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId) || isSuperAdmin();
    }
    
    // Submissions collection
    match /submissions/{submissionId} {
      // Users can create submissions
      allow create: if request.auth != null;
      
      // Users can read/update their own submissions, admin-level users can read/update all
      allow read: if request.auth != null && 
        (hasAdminLevelAccess() || 
         (exists(/databases/$(database)/documents/submissions/$(submissionId)) && 
          request.auth.uid == resource.data.userId));
      
      allow update: if request.auth != null && 
        (hasAdminLevelAccess() || 
         (exists(/databases/$(database)/documents/submissions/$(submissionId)) && 
          request.auth.uid == resource.data.userId));
      
      // Admin-level users can delete submissions
      allow delete: if hasAdminLevelAccess();
      
      // ShortFilmComments subcollection - admin-level users can read/write
      match /ShortFilmComments/{commentId} {
        allow read, write, create, update, delete: if hasAdminLevelAccess();
      }
      
      // Notes subcollection - admin-level users can read/write
      match /notes/{noteId} {
        allow read, write, create, update, delete: if hasAdminLevelAccess();
      }
      
      // Guests subcollection - users can read/write their own submission's guests, admin-level users can read/write all
      match /guests/{guestId} {
        // Read: Users can read their own submission's guests, admin-level users can read all
        allow read: if request.auth != null && 
          (hasAdminLevelAccess() || 
           (exists(/databases/$(database)/documents/submissions/$(submissionId)) && 
            get(/databases/$(database)/documents/submissions/$(submissionId)).data.userId == request.auth.uid));
        
        // Create: Users can create guests when creating their submission
        allow create: if request.auth != null && 
          (hasAdminLevelAccess() || 
           (exists(/databases/$(database)/documents/submissions/$(submissionId)) && 
            get(/databases/$(database)/documents/submissions/$(submissionId)).data.userId == request.auth.uid));
        
        // Update: Admin-level users or submission owners can update guests
        allow update: if request.auth != null && 
          (hasAdminLevelAccess() || 
           (exists(/databases/$(database)/documents/submissions/$(submissionId)) && 
            get(/databases/$(database)/documents/submissions/$(submissionId)).data.userId == request.auth.uid));
        
        // Delete: Admin-level users can delete guests
        allow delete: if hasAdminLevelAccess();
      }
    }
    
    // Admin collection - for admin-level users
    match /admin/{document=**} {
      allow read, write, create, update, delete: if hasAdminLevelAccess();
    }
    
    // Admins collection - for admin-level users  
    match /admins/{adminId} {
      allow read, write, create, update, delete: if hasAdminLevelAccess();
    }
    
    // Role audit log collection - only super-admins can read/write
    match /roleAuditLog/{logId} {
      allow read, write, create, update, delete: if isSuperAdmin();
    }
    
    // Partners collection - admin/super-admin/editor can manage, all can read active
    match /partners/{partnerId} {
      // Read: Allow all users (including unauthenticated) to read partners
      allow read: if true;
      
      // Write: Admin, super-admin, and editor can create, update, delete
      allow write: if request.auth != null && 
        (get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ['admin', 'super-admin', 'editor']);
    }
    
    // Activities collection - admin/editor can manage, public can read published activities
    match /activities/{activityId} {
      // Read: Allow all users to read published and public activities
      // Admin-level users can read all activities
      allow read: if hasAdminLevelAccess() || 
        (resource.data.status == 'published' && resource.data.isPublic == true);
      
      // Create: Only authenticated admin-level users can create activities
      allow create: if request.auth != null && hasAdminLevelAccess() &&
        // Validate required fields
        request.resource.data.keys().hasAll(['name', 'shortDescription', 'status', 'isPublic', 
          'needSubmission', 'maxParticipants', 'isOneDayActivity', 'eventDate', 'startTime', 'endTime', 'registrationDeadline',
          'venueName', 'description', 'organizers', 'speakers', 'tags', 'contactEmail', 'contactName',
          'createdAt', 'updatedAt', 'createdBy', 'updatedBy']) &&
        // Validate data types and constraints
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 3 &&
        request.resource.data.name.size() <= 100 &&
        request.resource.data.shortDescription is string &&
        request.resource.data.shortDescription.size() >= 10 &&
        request.resource.data.shortDescription.size() <= 200 &&
        request.resource.data.status in ['draft', 'published', 'cancelled', 'completed'] &&
        request.resource.data.isPublic is bool &&
        request.resource.data.needSubmission is bool &&
        request.resource.data.maxParticipants is int &&
        request.resource.data.maxParticipants >= 0 &&
        request.resource.data.isOneDayActivity is bool &&
        request.resource.data.organizers is list &&
        request.resource.data.organizers.size() > 0 &&
        request.resource.data.speakers is list &&
        request.resource.data.tags is list &&
        request.resource.data.tags.size() > 0 &&
        request.resource.data.tags.size() <= 10 &&
        request.resource.data.contactEmail is string &&
        request.resource.data.contactEmail.matches('.*@.*\\..*') &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.updatedBy == request.auth.uid;
      
      // Update: Only authenticated admin-level users can update activities
      // Users can only update activities they created or if they have admin-level access
      allow update: if request.auth != null && hasAdminLevelAccess() &&
        (resource.data.createdBy == request.auth.uid || hasAdminLevelAccess()) &&
        // Ensure immutable fields are not changed
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.createdAt == resource.data.createdAt &&
        request.resource.data.updatedBy == request.auth.uid &&
        // Validate updated fields if they exist
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['name']) ||
         (request.resource.data.name is string &&
          request.resource.data.name.size() >= 3 &&
          request.resource.data.name.size() <= 100)) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['shortDescription']) ||
         (request.resource.data.shortDescription is string &&
          request.resource.data.shortDescription.size() >= 10 &&
          request.resource.data.shortDescription.size() <= 200)) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['status']) ||
         request.resource.data.status in ['draft', 'published', 'cancelled', 'completed']) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isPublic']) ||
         request.resource.data.isPublic is bool) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['needSubmission']) ||
         request.resource.data.needSubmission is bool) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['maxParticipants']) ||
         (request.resource.data.maxParticipants is int &&
          request.resource.data.maxParticipants >= 0)) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isOneDayActivity']) ||
         request.resource.data.isOneDayActivity is bool) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['organizers']) ||
         (request.resource.data.organizers is list &&
          request.resource.data.organizers.size() > 0)) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['speakers']) ||
         request.resource.data.speakers is list) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['tags']) ||
         (request.resource.data.tags is list &&
          request.resource.data.tags.size() > 0 &&
          request.resource.data.tags.size() <= 10)) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['contactEmail']) ||
         (request.resource.data.contactEmail is string &&
          request.resource.data.contactEmail.matches('.*@.*\\..*')));
      
      // Delete: Only admin users can delete activities
      allow delete: if request.auth != null && isAdmin();
      
      // Speakers subcollection - admin-level users can manage speakers for activities
      match /speakers/{speakerId} {
        // Read: Admin-level users can read all speakers, public can read speakers for published activities
        allow read: if hasAdminLevelAccess() || 
          (exists(/databases/$(database)/documents/activities/$(activityId)) &&
           get(/databases/$(database)/documents/activities/$(activityId)).data.status == 'published' &&
           get(/databases/$(database)/documents/activities/$(activityId)).data.isPublic == true);
        
        // Create: Only admin-level users can create speakers
        allow create: if request.auth != null && hasAdminLevelAccess() &&
          // Validate required fields
          request.resource.data.keys().hasAll(['name', 'role', 'createdAt', 'updatedAt']) &&
          // Validate data types
          request.resource.data.name is string &&
          request.resource.data.name.size() >= 1 &&
          request.resource.data.name.size() <= 100 &&
          request.resource.data.role is string &&
          request.resource.data.role.size() >= 1 &&
          // Optional fields validation
          (!request.resource.data.keys().hasAny(['email']) ||
           (request.resource.data.email is string &&
            request.resource.data.email.matches('.*@.*\\..*'))) &&
          (!request.resource.data.keys().hasAny(['phone']) ||
           request.resource.data.phone is string) &&
          (!request.resource.data.keys().hasAny(['bio']) ||
           request.resource.data.bio is string) &&
          (!request.resource.data.keys().hasAny(['otherRole']) ||
           request.resource.data.otherRole is string) &&
          (!request.resource.data.keys().hasAny(['image']) ||
           request.resource.data.image is string) &&
          (!request.resource.data.keys().hasAny(['imagePath']) ||
           request.resource.data.imagePath is string);
        
        // Update: Only admin-level users can update speakers
        allow update: if request.auth != null && hasAdminLevelAccess() &&
          // Ensure immutable fields are not changed
          request.resource.data.createdAt == resource.data.createdAt &&
          // Validate updated fields if they exist
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['name']) ||
           (request.resource.data.name is string &&
            request.resource.data.name.size() >= 1 &&
            request.resource.data.name.size() <= 100)) &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) ||
           (request.resource.data.role is string &&
            request.resource.data.role.size() >= 1)) &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email']) ||
           (request.resource.data.email == null ||
            (request.resource.data.email is string &&
             request.resource.data.email.matches('.*@.*\\..*')))) &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['phone']) ||
           (request.resource.data.phone == null ||
            request.resource.data.phone is string)) &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['bio']) ||
           (request.resource.data.bio == null ||
            request.resource.data.bio is string)) &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['otherRole']) ||
           (request.resource.data.otherRole == null ||
            request.resource.data.otherRole is string)) &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['image']) ||
           (request.resource.data.image == null ||
            request.resource.data.image is string)) &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['imagePath']) ||
           (request.resource.data.imagePath == null ||
            request.resource.data.imagePath is string));
        
        // Delete: Only admin-level users can delete speakers
        allow delete: if request.auth != null && hasAdminLevelAccess();
      }
    }
    
    // Films collection - for feature film management (includes editors)
    match /films/{filmId} {
      allow create: if request.auth != null;
      // Public read access for films with publicationStatus: 'public' - NO AUTH REQUIRED
      // Simplified logic: prioritize publicationStatus field as primary criteria
      allow read: if resource.data.publicationStatus == 'public' ||
        (request.auth != null && 
         (isAdmin() || isEditor() || 
          (exists(/databases/$(database)/documents/films/$(filmId)) && 
           request.auth.uid == resource.data.userId)));
      allow update: if request.auth != null && 
        (isAdmin() || isEditor() || 
         (exists(/databases/$(database)/documents/films/$(filmId)) && 
          request.auth.uid == resource.data.userId));
      allow delete: if isAdmin() || isEditor();
      
      match /guests/{guestId} {
        allow read: if request.auth != null && 
          (isAdmin() || isEditor() || 
           (exists(/databases/$(database)/documents/films/$(filmId)) && 
            request.auth.uid == get(/databases/$(database)/documents/films/$(filmId)).data.userId));
        
        allow create, update: if request.auth != null && 
          (isAdmin() || isEditor() || 
           (exists(/databases/$(database)/documents/films/$(filmId)) && 
            request.auth.uid == get(/databases/$(database)/documents/films/$(filmId)).data.userId)) &&
          request.resource.data.name is string &&
          request.resource.data.name.size() >= 1 &&
          request.resource.data.role is string &&
          request.resource.data.role.size() >= 1;
        
        allow delete: if request.auth != null && 
          (isAdmin() || isEditor() || 
           (exists(/databases/$(database)/documents/films/$(filmId)) && 
            request.auth.uid == get(/databases/$(database)/documents/films/$(filmId)).data.userId));
      }
    }
    
    
    // News collection - for news and articles management (temporary simplified rules)
    match /news/{articleId} {
      // Read: Public can read published articles, authenticated users can read all
      allow read: if resource.data.status == 'published' || request.auth != null;
      
      // Create: Any authenticated user can create articles (temporary for testing)
      allow create: if request.auth != null;
      
      // Update: Any authenticated user can update articles (temporary for testing)
      allow update: if request.auth != null;
      
      // Delete: Any authenticated user can delete articles (temporary for testing)
      allow delete: if request.auth != null;
    }
    
    // Public collections (read-only for all users)
    match /public/{document=**} {
      allow read: if true;
      allow write: if false;
    }
  }
}
